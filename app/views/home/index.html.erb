<div class="page">
  <% @chapters.each do |chapter| %>
    <h1 class="text-gold text-center">
      <%= chapter.chapter_number %>
      .&nbsp<%= TranslatedName.where(resource_type: "Chapter", language_name: "english", resource_id: chapter.id).first.name %>
      <div>(<%= chapter.name_simple %>)</div>
    </h1>
    <%= render 'surah', chapter: chapter %>
  <% end %>
</div>


<script>

    var pageHeight = 1260; // our print page height - for A4
    var pageWidth = 794; // our print page width - for A4
    var footnoteHeight = 15;

    // First pass - identify footnotes, mark locations and replace all the footnote text
    var footnoteCount = 0;
    var pageFooterOffsets = [];
    var pageFooterText = [];
    $(function(){
        var all = $('.page').children();
        all.wrapAll("<div id=\"tempDocWrapper\" style=\"width:"+pageWidth+"px; float:none;\" />");
        function identifyFootnotes(extractText) {
            footnoteCount = 0;
            pageFooterOffsets = [];
            $('.footnote').each(function (ind, el) {
                var f = $(el);
                var offset = f.offset();
                pageFooterOffsets[footnoteCount] = offset.top;
                if (extractText) {
                    pageFooterText[footnoteCount] = "<li data-length='"+f.data("length")+"' value=\""+(footnoteCount+1)+"\" class=\"footerEntry\">" + f.html() + "</li>";
                    f.replaceWith("<sup class=\"footnote\">" + (footnoteCount+1) + "</sup>");
                }
                footnoteCount++;
            });
        }
        identifyFootnotes(true);

        // Second pass - Insert the footnotes at page boundaries
        var currentFootnote = 0;
        var lastFootnoteInPage = 0;
        var currentPageElems = [ ];
        var availHeight = pageHeight; // Initially, the available space for content is the whole page - this shrinks as we add footnotes.
        if (footnoteCount > 0) {
            all.each(function (ind, el) {
                var div = $(el);
                currentPageElems.push(div); // Capture all children on current page for later wrapping.
                if (!div.is('div') && !div.is('h1') && !div.is('p') && !div.is('h3'))
                    return;
                var domElem = div[0];
                var offset = div.offset();
                if (currentFootnote == footnoteCount)
                    return; // All finished
                if (domElem.style.position != "" && domElem.style.position != "relative") {
                    return; // We ignore a fixed / absolute positioned div for determining page breaks
                }
                var multiplier = 1;
                var currentPage = Math.ceil((offset.top+1) / pageHeight);
                var pageStartPos = (currentPage - 1) * pageHeight;
                while (lastFootnoteInPage < footnoteCount && pageFooterOffsets[lastFootnoteInPage] <= Math.min(offset.top + div.height(),pageStartPos + availHeight)) {
                    text = pageFooterText[lastFootnoteInPage];
                    length = text.match("data-length='(.[0-9]*)'")[1];
                    multiplier = Math.ceil(parseInt(length)/140);
                    //console.log(multiplier);
                    availHeight -= (footnoteHeight * multiplier);
                    lastFootnoteInPage++;
                }
                if (div.height() < pageHeight && (offset.top + div.height() > pageStartPos + availHeight)) {
                    // Create a page break (pageWrapper div) and insert the footnotes
                    currentPageElems.pop(); // Current div is moving to next page
                    while (lastFootnoteInPage > currentFootnote && pageFooterOffsets[lastFootnoteInPage - 1] >= offset.top)
                        lastFootnoteInPage--; // The paragraph containing the footnote will move.
                    // Insert the current batch of footnotes.
                    var footerHeight = (lastFootnoteInPage - currentFootnote) * footnoteHeight;
                    var footer="<ol id=\"footer"+currentPage+"\" class=\"footer\" style=\"height:"+footerHeight+"px;\">";
                    var fixedFooterHeight = 0;
                    multiplier = 1;
                    while (currentFootnote < lastFootnoteInPage){
                        footerString = pageFooterText[currentFootnote++];
                        length = footerString.match("data-length='(.[0-9]*)'")[1];
                        multiplier = Math.ceil(parseInt(length)/140);
                        fixedFooterHeight += fixedFooterHeight + (footnoteHeight * multiplier);
                        footer += footerString;
                    }
                    footer += "</ol>";
                    div.before(footer);
                    $("#footer"+currentPage).css({"height": fixedFooterHeight+"px"});
                    currentPageElems.push($("#footer"+currentPage));
                    var elems = $(currentPageElems).map (function () {return this.toArray(); } );
                    elems.wrapAll("<div id=\"page"+currentPage+"\" class=\"pageWrapper\" />");
                    $("#page"+currentPage).css({'height': pageHeight+"px"});
                    console.log(pageStartPos)
                    // Update the position of all remaining footnotes.
                    identifyFootnotes(false);

                    // set up for next page
                    availHeight = pageHeight;
                    lastFootnoteInPage = currentFootnote;
                    currentPageElems = [ ];
                    currentPageElems.push(div);
                }
            });

            // Insert the last batch of footnotes.

            if (currentFootnote < footnoteCount) {
                // Find the last child to append after
                var div = all.eq(-1);
                var offset = div.offset();
                var currentPage = Math.ceil((offset.top+1) / pageHeight);
                var footerHeight = (footnoteCount - currentFootnote) * footnoteHeight;
                var footer="<ol id=\"footer"+currentPage+"\" class=\"footer\" style=\"height:"+footerHeight+"px;\">";
                while (currentFootnote < footnoteCount)
                    footer += pageFooterText[currentFootnote++];
                footer += "</ol>";
                div.after(footer);
                currentPageElems.push($("#footer"+currentPage));
                var elems = $(currentPageElems).map (function () {return this.toArray(); } );
                elems.wrapAll("<div id=\"page"+currentPage+"\" class=\"pageWrapper\" />");
                $("#page"+currentPage).css({'height': pageHeight+"px"});
            }
        }
        // Remove "print" imposed layout and ensure pageWrappers have enough space to display the footer.
        $('#tempDocWrapper').children().unwrap();
        var pages = $('.pageWrapper');
        var footers = $('.footer');
        pages.each(function (ind, el) {
            var page = $(el);
            var foot = footers.eq(ind);
            height = foot.find("li").length * 15;
            foot.css({height: (height)});
            page.css({'height':'auto','padding-bottom':height});
        });
        window.status = "doc_ready";
    });

</script>

<style>
    * {
        -moz-box-sizing: border-box;
        box-sizing: border-box;
    }

    .page {
        border-left: 5px solid #FFAF00;
        border-right: 5px solid #FFAF00;
        padding-bottom: 1260px;
    }

    .text-gold {
        color: #FFAF00
    }

    html {
        height: 100%;
    }

    body {
        height: 100%;
        padding: 0px;
        margin: 8px 0px 8px 0px;
        /*padding: 10px; padding-top: 10px; padding-bottom: 0px;*/
        /*width: 23cm;
        height: 29.7cm;
        margin: 15mm 10mm 18mm 10mm;*/
    }

    .plr-10 {
        padding-left: 10px;
        padding-right: 10px;
    }

    h3 {
        margin-top: 0.5em;
        font-size: 17px;
        margin-bottom: 5px;
        font-weight: 600;
    }

    p {
        font-size: 13px;
        margin-top: 0px;
        font-weight: normal;
    }

    .mt-0 {
        margin-top: 0px;
    }

    .pr-5 {
        padding-right: 5px;
    }

    .text-right {
        text-align: right !important;
    }

    /*ol{font-size: 1.17em;font-weight: bold;}*/
    ul {
        list-style-type: none;
        padding-left: 10px;
        padding-right: 10px;
    }

    li.alwaysbreak {
        page-break-before: always;
    }

    nobreak:before {
        clear: both;
    }

    nobreak {
        page-break-inside: avoid;
    }

    .mb-0 {
        margin-bottom: 0px;
    }

    .text-center {
        text-align: center;
        width: 100%;
    }

    .verse-word {
        margin: 0 5px;
        font-size: 30px !important;
    }

    .ml-5 {
        margin-left: 5px;
    }

    .pageWrapper {
        /*border-left: 5px solid #FFAF00;border-right: 5px solid #FFAF00;*/
        padding: 10px;
        /*border: 1px solid #000;*/
        position: relative;
        min-height: 100%;
        -webkit-region-break-inside: avoid; /* added these bits to work out print issue */
        page-break-after: always;
        page-break-inside: avoid;
    }

    .footer {
        width: 98%;
        border-top: 1px solid #FFAF00;
        /*position: absolute;*/
        /*bottom:0;*/
    }

    .footerEntry {
        /*height:15px;*/
        font-size: 8pt;
    }

    .red {
        color: red;
    }

    ol {
        margin: 0px;
    }
</style>
